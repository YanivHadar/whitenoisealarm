a6541fa05828a706d59a71b907146826
"use strict";

/**
 * Database Test Operations for Alarm & White Noise App
 *
 * Comprehensive testing suite for database operations, real-time functionality,
 * and performance validation. Use this to verify Phase 1.2 completion.
 */
/* istanbul ignore next */
function cov_1ege9wdjbo() {
  var path = "/Users/yanivhadar/Desktop/White Noise Alarm/AlarmWhiteNoiseApp/src/lib/database/test-operations.ts";
  var hash = "57d1b967e938ce04e5d16fc3f666286f78ab1493";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/yanivhadar/Desktop/White Noise Alarm/AlarmWhiteNoiseApp/src/lib/database/test-operations.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 48
        }
      },
      "2": {
        start: {
          line: 10,
          column: 0
        },
        end: {
          line: 10,
          column: 48
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 11,
          column: 50
        }
      },
      "4": {
        start: {
          line: 12,
          column: 0
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "5": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 13,
          column: 62
        }
      },
      "6": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "7": {
        start: {
          line: 15,
          column: 0
        },
        end: {
          line: 15,
          column: 44
        }
      },
      "8": {
        start: {
          line: 16,
          column: 19
        },
        end: {
          line: 16,
          column: 53
        }
      },
      "9": {
        start: {
          line: 17,
          column: 17
        },
        end: {
          line: 17,
          column: 46
        }
      },
      "10": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 17
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 43
        }
      },
      "12": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 50
        }
      },
      "13": {
        start: {
          line: 30,
          column: 22
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "14": {
        start: {
          line: 31,
          column: 23
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "15": {
        start: {
          line: 32,
          column: 25
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "16": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 36
        }
      },
      "17": {
        start: {
          line: 40,
          column: 18
        },
        end: {
          line: 40,
          column: 20
        }
      },
      "18": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 40
        }
      },
      "19": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 63,
          column: 5
        }
      },
      "20": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 52
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "22": {
        start: {
          line: 46,
          column: 23
        },
        end: {
          line: 46,
          column: 75
        }
      },
      "23": {
        start: {
          line: 47,
          column: 25
        },
        end: {
          line: 47,
          column: 40
        }
      },
      "24": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 54,
          column: 11
        }
      },
      "25": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "26": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "27": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 66,
          column: 52
        }
      },
      "28": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 26
        }
      },
      "29": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 74
        }
      },
      "30": {
        start: {
          line: 69,
          column: 25
        },
        end: {
          line: 69,
          column: 40
        }
      },
      "31": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "32": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 84,
          column: 11
        }
      },
      "33": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "34": {
        start: {
          line: 88,
          column: 26
        },
        end: {
          line: 88,
          column: 52
        }
      },
      "35": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 26
        }
      },
      "36": {
        start: {
          line: 90,
          column: 24
        },
        end: {
          line: 90,
          column: 65
        }
      },
      "37": {
        start: {
          line: 91,
          column: 25
        },
        end: {
          line: 91,
          column: 40
        }
      },
      "38": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 97,
          column: 11
        }
      },
      "39": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "40": {
        start: {
          line: 107,
          column: 26
        },
        end: {
          line: 107,
          column: 56
        }
      },
      "41": {
        start: {
          line: 108,
          column: 19
        },
        end: {
          line: 108,
          column: 54
        }
      },
      "42": {
        start: {
          line: 108,
          column: 37
        },
        end: {
          line: 108,
          column: 46
        }
      },
      "43": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 118,
          column: 6
        }
      },
      "44": {
        start: {
          line: 124,
          column: 18
        },
        end: {
          line: 124,
          column: 20
        }
      },
      "45": {
        start: {
          line: 125,
          column: 23
        },
        end: {
          line: 125,
          column: 40
        }
      },
      "46": {
        start: {
          line: 126,
          column: 19
        },
        end: {
          line: 126,
          column: 23
        }
      },
      "47": {
        start: {
          line: 128,
          column: 23
        },
        end: {
          line: 128,
          column: 61
        }
      },
      "48": {
        start: {
          line: 129,
          column: 25
        },
        end: {
          line: 134,
          column: 5
        }
      },
      "49": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 158,
          column: 5
        }
      },
      "50": {
        start: {
          line: 137,
          column: 37
        },
        end: {
          line: 139,
          column: 10
        }
      },
      "51": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 63
        }
      },
      "52": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "53": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 149,
          column: 9
        }
      },
      "54": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 35
        }
      },
      "55": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "56": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "57": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "58": {
        start: {
          line: 162,
          column: 41
        },
        end: {
          line: 164,
          column: 14
        }
      },
      "59": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 67
        }
      },
      "60": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 171,
          column: 15
        }
      },
      "61": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 179,
          column: 15
        }
      },
      "62": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "63": {
        start: {
          line: 183,
          column: 41
        },
        end: {
          line: 188,
          column: 14
        }
      },
      "64": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "65": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 195,
          column: 15
        }
      },
      "66": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 203,
          column: 15
        }
      },
      "67": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "68": {
        start: {
          line: 207,
          column: 41
        },
        end: {
          line: 209,
          column: 14
        }
      },
      "69": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 74
        }
      },
      "70": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 216,
          column: 15
        }
      },
      "71": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 224,
          column: 15
        }
      },
      "72": {
        start: {
          line: 227,
          column: 26
        },
        end: {
          line: 227,
          column: 56
        }
      },
      "73": {
        start: {
          line: 228,
          column: 19
        },
        end: {
          line: 228,
          column: 54
        }
      },
      "74": {
        start: {
          line: 228,
          column: 37
        },
        end: {
          line: 228,
          column: 46
        }
      },
      "75": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 238,
          column: 6
        }
      },
      "76": {
        start: {
          line: 244,
          column: 18
        },
        end: {
          line: 244,
          column: 20
        }
      },
      "77": {
        start: {
          line: 245,
          column: 23
        },
        end: {
          line: 245,
          column: 40
        }
      },
      "78": {
        start: {
          line: 246,
          column: 20
        },
        end: {
          line: 246,
          column: 24
        }
      },
      "79": {
        start: {
          line: 247,
          column: 23
        },
        end: {
          line: 247,
          column: 61
        }
      },
      "80": {
        start: {
          line: 248,
          column: 26
        },
        end: {
          line: 258,
          column: 5
        }
      },
      "81": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 282,
          column: 5
        }
      },
      "82": {
        start: {
          line: 261,
          column: 37
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "83": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 65
        }
      },
      "84": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 270,
          column: 11
        }
      },
      "85": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "86": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 36
        }
      },
      "87": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 281,
          column: 11
        }
      },
      "88": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 303,
          column: 5
        }
      },
      "89": {
        start: {
          line: 285,
          column: 37
        },
        end: {
          line: 287,
          column: 10
        }
      },
      "90": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 65
        }
      },
      "91": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 294,
          column: 11
        }
      },
      "92": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "93": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 324,
          column: 5
        }
      },
      "94": {
        start: {
          line: 306,
          column: 37
        },
        end: {
          line: 308,
          column: 10
        }
      },
      "95": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 71
        }
      },
      "96": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "97": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 323,
          column: 11
        }
      },
      "98": {
        start: {
          line: 326,
          column: 4
        },
        end: {
          line: 393,
          column: 5
        }
      },
      "99": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "100": {
        start: {
          line: 328,
          column: 41
        },
        end: {
          line: 334,
          column: 14
        }
      },
      "101": {
        start: {
          line: 329,
          column: 16
        },
        end: {
          line: 333,
          column: 19
        }
      },
      "102": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 341,
          column: 15
        }
      },
      "103": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 349,
          column: 15
        }
      },
      "104": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 371,
          column: 9
        }
      },
      "105": {
        start: {
          line: 353,
          column: 41
        },
        end: {
          line: 355,
          column: 14
        }
      },
      "106": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 74
        }
      },
      "107": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 362,
          column: 15
        }
      },
      "108": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 370,
          column: 15
        }
      },
      "109": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "110": {
        start: {
          line: 374,
          column: 41
        },
        end: {
          line: 376,
          column: 14
        }
      },
      "111": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 68
        }
      },
      "112": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 383,
          column: 15
        }
      },
      "113": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 391,
          column: 15
        }
      },
      "114": {
        start: {
          line: 394,
          column: 26
        },
        end: {
          line: 394,
          column: 56
        }
      },
      "115": {
        start: {
          line: 395,
          column: 19
        },
        end: {
          line: 395,
          column: 54
        }
      },
      "116": {
        start: {
          line: 395,
          column: 37
        },
        end: {
          line: 395,
          column: 46
        }
      },
      "117": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 405,
          column: 6
        }
      },
      "118": {
        start: {
          line: 411,
          column: 18
        },
        end: {
          line: 411,
          column: 20
        }
      },
      "119": {
        start: {
          line: 412,
          column: 23
        },
        end: {
          line: 412,
          column: 40
        }
      },
      "120": {
        start: {
          line: 413,
          column: 23
        },
        end: {
          line: 413,
          column: 61
        }
      },
      "121": {
        start: {
          line: 415,
          column: 4
        },
        end: {
          line: 445,
          column: 5
        }
      },
      "122": {
        start: {
          line: 416,
          column: 26
        },
        end: {
          line: 416,
          column: 52
        }
      },
      "123": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 26
        }
      },
      "124": {
        start: {
          line: 418,
          column: 32
        },
        end: {
          line: 418,
          column: 37
        }
      },
      "125": {
        start: {
          line: 419,
          column: 32
        },
        end: {
          line: 419,
          column: 36
        }
      },
      "126": {
        start: {
          line: 420,
          column: 24
        },
        end: {
          line: 423,
          column: 10
        }
      },
      "127": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 421,
          column: 69
        }
      },
      "128": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 37
        }
      },
      "129": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 64
        }
      },
      "130": {
        start: {
          line: 425,
          column: 37
        },
        end: {
          line: 425,
          column: 62
        }
      },
      "131": {
        start: {
          line: 426,
          column: 25
        },
        end: {
          line: 426,
          column: 40
        }
      },
      "132": {
        start: {
          line: 428,
          column: 29
        },
        end: {
          line: 428,
          column: 55
        }
      },
      "133": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 36
        }
      },
      "134": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 436,
          column: 11
        }
      },
      "135": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 444,
          column: 11
        }
      },
      "136": {
        start: {
          line: 447,
          column: 4
        },
        end: {
          line: 473,
          column: 5
        }
      },
      "137": {
        start: {
          line: 448,
          column: 26
        },
        end: {
          line: 448,
          column: 52
        }
      },
      "138": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 26
        }
      },
      "139": {
        start: {
          line: 450,
          column: 24
        },
        end: {
          line: 452,
          column: 10
        }
      },
      "140": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 71
        }
      },
      "141": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 64
        }
      },
      "142": {
        start: {
          line: 454,
          column: 37
        },
        end: {
          line: 454,
          column: 62
        }
      },
      "143": {
        start: {
          line: 455,
          column: 25
        },
        end: {
          line: 455,
          column: 40
        }
      },
      "144": {
        start: {
          line: 456,
          column: 29
        },
        end: {
          line: 456,
          column: 55
        }
      },
      "145": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 457,
          column: 36
        }
      },
      "146": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 464,
          column: 11
        }
      },
      "147": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 472,
          column: 11
        }
      },
      "148": {
        start: {
          line: 474,
          column: 26
        },
        end: {
          line: 474,
          column: 56
        }
      },
      "149": {
        start: {
          line: 475,
          column: 19
        },
        end: {
          line: 475,
          column: 54
        }
      },
      "150": {
        start: {
          line: 475,
          column: 37
        },
        end: {
          line: 475,
          column: 46
        }
      },
      "151": {
        start: {
          line: 476,
          column: 4
        },
        end: {
          line: 485,
          column: 6
        }
      },
      "152": {
        start: {
          line: 491,
          column: 18
        },
        end: {
          line: 491,
          column: 20
        }
      },
      "153": {
        start: {
          line: 492,
          column: 23
        },
        end: {
          line: 492,
          column: 40
        }
      },
      "154": {
        start: {
          line: 493,
          column: 23
        },
        end: {
          line: 493,
          column: 61
        }
      },
      "155": {
        start: {
          line: 495,
          column: 4
        },
        end: {
          line: 532,
          column: 5
        }
      },
      "156": {
        start: {
          line: 496,
          column: 27
        },
        end: {
          line: 496,
          column: 29
        }
      },
      "157": {
        start: {
          line: 497,
          column: 26
        },
        end: {
          line: 497,
          column: 28
        }
      },
      "158": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 503,
          column: 9
        }
      },
      "159": {
        start: {
          line: 498,
          column: 21
        },
        end: {
          line: 498,
          column: 22
        }
      },
      "160": {
        start: {
          line: 499,
          column: 33
        },
        end: {
          line: 501,
          column: 14
        }
      },
      "161": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 93
        }
      },
      "162": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 37
        }
      },
      "163": {
        start: {
          line: 504,
          column: 28
        },
        end: {
          line: 504,
          column: 81
        }
      },
      "164": {
        start: {
          line: 504,
          column: 57
        },
        end: {
          line: 504,
          column: 64
        }
      },
      "165": {
        start: {
          line: 505,
          column: 28
        },
        end: {
          line: 505,
          column: 50
        }
      },
      "166": {
        start: {
          line: 506,
          column: 28
        },
        end: {
          line: 506,
          column: 50
        }
      },
      "167": {
        start: {
          line: 507,
          column: 34
        },
        end: {
          line: 507,
          column: 36
        }
      },
      "168": {
        start: {
          line: 508,
          column: 24
        },
        end: {
          line: 508,
          column: 55
        }
      },
      "169": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 523,
          column: 11
        }
      },
      "170": {
        start: {
          line: 526,
          column: 8
        },
        end: {
          line: 531,
          column: 11
        }
      },
      "171": {
        start: {
          line: 534,
          column: 4
        },
        end: {
          line: 568,
          column: 5
        }
      },
      "172": {
        start: {
          line: 535,
          column: 26
        },
        end: {
          line: 535,
          column: 52
        }
      },
      "173": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 536,
          column: 26
        }
      },
      "174": {
        start: {
          line: 537,
          column: 25
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "175": {
        start: {
          line: 543,
          column: 24
        },
        end: {
          line: 543,
          column: 51
        }
      },
      "176": {
        start: {
          line: 544,
          column: 25
        },
        end: {
          line: 544,
          column: 40
        }
      },
      "177": {
        start: {
          line: 545,
          column: 37
        },
        end: {
          line: 545,
          column: 74
        }
      },
      "178": {
        start: {
          line: 545,
          column: 57
        },
        end: {
          line: 545,
          column: 66
        }
      },
      "179": {
        start: {
          line: 546,
          column: 24
        },
        end: {
          line: 546,
          column: 64
        }
      },
      "180": {
        start: {
          line: 547,
          column: 8
        },
        end: {
          line: 559,
          column: 11
        }
      },
      "181": {
        start: {
          line: 557,
          column: 43
        },
        end: {
          line: 557,
          column: 87
        }
      },
      "182": {
        start: {
          line: 562,
          column: 8
        },
        end: {
          line: 567,
          column: 11
        }
      },
      "183": {
        start: {
          line: 569,
          column: 26
        },
        end: {
          line: 569,
          column: 56
        }
      },
      "184": {
        start: {
          line: 570,
          column: 19
        },
        end: {
          line: 570,
          column: 54
        }
      },
      "185": {
        start: {
          line: 570,
          column: 37
        },
        end: {
          line: 570,
          column: 46
        }
      },
      "186": {
        start: {
          line: 571,
          column: 4
        },
        end: {
          line: 580,
          column: 6
        }
      },
      "187": {
        start: {
          line: 586,
          column: 25
        },
        end: {
          line: 586,
          column: 42
        }
      },
      "188": {
        start: {
          line: 587,
          column: 4
        },
        end: {
          line: 587,
          column: 65
        }
      },
      "189": {
        start: {
          line: 588,
          column: 19
        },
        end: {
          line: 588,
          column: 21
        }
      },
      "190": {
        start: {
          line: 589,
          column: 4
        },
        end: {
          line: 632,
          column: 5
        }
      },
      "191": {
        start: {
          line: 591,
          column: 8
        },
        end: {
          line: 591,
          column: 48
        }
      },
      "192": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 592,
          column: 48
        }
      },
      "193": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 593,
          column: 49
        }
      },
      "194": {
        start: {
          line: 594,
          column: 8
        },
        end: {
          line: 594,
          column: 55
        }
      },
      "195": {
        start: {
          line: 595,
          column: 8
        },
        end: {
          line: 595,
          column: 55
        }
      },
      "196": {
        start: {
          line: 596,
          column: 32
        },
        end: {
          line: 596,
          column: 64
        }
      },
      "197": {
        start: {
          line: 598,
          column: 24
        },
        end: {
          line: 603,
          column: 9
        }
      },
      "198": {
        start: {
          line: 599,
          column: 49
        },
        end: {
          line: 599,
          column: 74
        }
      },
      "199": {
        start: {
          line: 600,
          column: 50
        },
        end: {
          line: 600,
          column: 76
        }
      },
      "200": {
        start: {
          line: 601,
          column: 50
        },
        end: {
          line: 601,
          column: 76
        }
      },
      "201": {
        start: {
          line: 605,
          column: 8
        },
        end: {
          line: 605,
          column: 50
        }
      },
      "202": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 606,
          column: 36
        }
      },
      "203": {
        start: {
          line: 607,
          column: 8
        },
        end: {
          line: 617,
          column: 11
        }
      },
      "204": {
        start: {
          line: 608,
          column: 56
        },
        end: {
          line: 608,
          column: 69
        }
      },
      "205": {
        start: {
          line: 609,
          column: 32
        },
        end: {
          line: 609,
          column: 87
        }
      },
      "206": {
        start: {
          line: 610,
          column: 27
        },
        end: {
          line: 610,
          column: 51
        }
      },
      "207": {
        start: {
          line: 611,
          column: 12
        },
        end: {
          line: 611,
          column: 117
        }
      },
      "208": {
        start: {
          line: 612,
          column: 12
        },
        end: {
          line: 616,
          column: 13
        }
      },
      "209": {
        start: {
          line: 613,
          column: 16
        },
        end: {
          line: 615,
          column: 19
        }
      },
      "210": {
        start: {
          line: 613,
          column: 40
        },
        end: {
          line: 613,
          column: 50
        }
      },
      "211": {
        start: {
          line: 614,
          column: 20
        },
        end: {
          line: 614,
          column: 70
        }
      },
      "212": {
        start: {
          line: 618,
          column: 8
        },
        end: {
          line: 618,
          column: 36
        }
      },
      "213": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 141
        }
      },
      "214": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 620,
          column: 75
        }
      },
      "215": {
        start: {
          line: 621,
          column: 8
        },
        end: {
          line: 626,
          column: 9
        }
      },
      "216": {
        start: {
          line: 622,
          column: 12
        },
        end: {
          line: 622,
          column: 82
        }
      },
      "217": {
        start: {
          line: 625,
          column: 12
        },
        end: {
          line: 625,
          column: 95
        }
      },
      "218": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 627,
          column: 35
        }
      },
      "219": {
        start: {
          line: 630,
          column: 8
        },
        end: {
          line: 630,
          column: 64
        }
      },
      "220": {
        start: {
          line: 631,
          column: 8
        },
        end: {
          line: 631,
          column: 20
        }
      },
      "221": {
        start: {
          line: 638,
          column: 4
        },
        end: {
          line: 638,
          column: 77
        }
      },
      "222": {
        start: {
          line: 639,
          column: 26
        },
        end: {
          line: 645,
          column: 5
        }
      },
      "223": {
        start: {
          line: 646,
          column: 4
        },
        end: {
          line: 673,
          column: 5
        }
      },
      "224": {
        start: {
          line: 647,
          column: 27
        },
        end: {
          line: 647,
          column: 54
        }
      },
      "225": {
        start: {
          line: 648,
          column: 25
        },
        end: {
          line: 648,
          column: 61
        }
      },
      "226": {
        start: {
          line: 648,
          column: 49
        },
        end: {
          line: 648,
          column: 60
        }
      },
      "227": {
        start: {
          line: 649,
          column: 30
        },
        end: {
          line: 649,
          column: 115
        }
      },
      "228": {
        start: {
          line: 649,
          column: 54
        },
        end: {
          line: 649,
          column: 114
        }
      },
      "229": {
        start: {
          line: 649,
          column: 85
        },
        end: {
          line: 649,
          column: 113
        }
      },
      "230": {
        start: {
          line: 650,
          column: 31
        },
        end: {
          line: 650,
          column: 80
        }
      },
      "231": {
        start: {
          line: 650,
          column: 60
        },
        end: {
          line: 650,
          column: 72
        }
      },
      "232": {
        start: {
          line: 651,
          column: 24
        },
        end: {
          line: 651,
          column: 63
        }
      },
      "233": {
        start: {
          line: 652,
          column: 8
        },
        end: {
          line: 652,
          column: 50
        }
      },
      "234": {
        start: {
          line: 653,
          column: 8
        },
        end: {
          line: 653,
          column: 36
        }
      },
      "235": {
        start: {
          line: 654,
          column: 8
        },
        end: {
          line: 658,
          column: 11
        }
      },
      "236": {
        start: {
          line: 655,
          column: 25
        },
        end: {
          line: 655,
          column: 79
        }
      },
      "237": {
        start: {
          line: 655,
          column: 49
        },
        end: {
          line: 655,
          column: 78
        }
      },
      "238": {
        start: {
          line: 656,
          column: 27
        },
        end: {
          line: 656,
          column: 52
        }
      },
      "239": {
        start: {
          line: 657,
          column: 12
        },
        end: {
          line: 657,
          column: 86
        }
      },
      "240": {
        start: {
          line: 659,
          column: 8
        },
        end: {
          line: 659,
          column: 36
        }
      },
      "241": {
        start: {
          line: 660,
          column: 8
        },
        end: {
          line: 667,
          column: 9
        }
      },
      "242": {
        start: {
          line: 661,
          column: 12
        },
        end: {
          line: 661,
          column: 80
        }
      },
      "243": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 662,
          column: 76
        }
      },
      "244": {
        start: {
          line: 665,
          column: 12
        },
        end: {
          line: 665,
          column: 81
        }
      },
      "245": {
        start: {
          line: 666,
          column: 12
        },
        end: {
          line: 666,
          column: 126
        }
      },
      "246": {
        start: {
          line: 668,
          column: 8
        },
        end: {
          line: 668,
          column: 23
        }
      },
      "247": {
        start: {
          line: 671,
          column: 8
        },
        end: {
          line: 671,
          column: 64
        }
      },
      "248": {
        start: {
          line: 672,
          column: 8
        },
        end: {
          line: 672,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 10
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 41
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 29
      },
      "3": {
        name: "testDatabaseHealth",
        decl: {
          start: {
            line: 39,
            column: 15
          },
          end: {
            line: 39,
            column: 33
          }
        },
        loc: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 108,
            column: 32
          },
          end: {
            line: 108,
            column: 33
          }
        },
        loc: {
          start: {
            line: 108,
            column: 37
          },
          end: {
            line: 108,
            column: 46
          }
        },
        line: 108
      },
      "5": {
        name: "testUserOperations",
        decl: {
          start: {
            line: 123,
            column: 15
          },
          end: {
            line: 123,
            column: 33
          }
        },
        loc: {
          start: {
            line: 123,
            column: 36
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 123
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 137,
            column: 77
          },
          end: {
            line: 137,
            column: 78
          }
        },
        loc: {
          start: {
            line: 137,
            column: 89
          },
          end: {
            line: 139,
            column: 9
          }
        },
        line: 137
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 162,
            column: 81
          },
          end: {
            line: 162,
            column: 82
          }
        },
        loc: {
          start: {
            line: 162,
            column: 93
          },
          end: {
            line: 164,
            column: 13
          }
        },
        line: 162
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 183,
            column: 81
          },
          end: {
            line: 183,
            column: 82
          }
        },
        loc: {
          start: {
            line: 183,
            column: 93
          },
          end: {
            line: 188,
            column: 13
          }
        },
        line: 183
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 207,
            column: 81
          },
          end: {
            line: 207,
            column: 82
          }
        },
        loc: {
          start: {
            line: 207,
            column: 93
          },
          end: {
            line: 209,
            column: 13
          }
        },
        line: 207
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 228,
            column: 32
          },
          end: {
            line: 228,
            column: 33
          }
        },
        loc: {
          start: {
            line: 228,
            column: 37
          },
          end: {
            line: 228,
            column: 46
          }
        },
        line: 228
      },
      "11": {
        name: "testAlarmOperations",
        decl: {
          start: {
            line: 243,
            column: 15
          },
          end: {
            line: 243,
            column: 34
          }
        },
        loc: {
          start: {
            line: 243,
            column: 37
          },
          end: {
            line: 406,
            column: 1
          }
        },
        line: 243
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 261,
            column: 77
          },
          end: {
            line: 261,
            column: 78
          }
        },
        loc: {
          start: {
            line: 261,
            column: 89
          },
          end: {
            line: 263,
            column: 9
          }
        },
        line: 261
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 285,
            column: 77
          },
          end: {
            line: 285,
            column: 78
          }
        },
        loc: {
          start: {
            line: 285,
            column: 89
          },
          end: {
            line: 287,
            column: 9
          }
        },
        line: 285
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 306,
            column: 77
          },
          end: {
            line: 306,
            column: 78
          }
        },
        loc: {
          start: {
            line: 306,
            column: 89
          },
          end: {
            line: 308,
            column: 9
          }
        },
        line: 306
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 328,
            column: 81
          },
          end: {
            line: 328,
            column: 82
          }
        },
        loc: {
          start: {
            line: 328,
            column: 93
          },
          end: {
            line: 334,
            column: 13
          }
        },
        line: 328
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 353,
            column: 81
          },
          end: {
            line: 353,
            column: 82
          }
        },
        loc: {
          start: {
            line: 353,
            column: 93
          },
          end: {
            line: 355,
            column: 13
          }
        },
        line: 353
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 374,
            column: 81
          },
          end: {
            line: 374,
            column: 82
          }
        },
        loc: {
          start: {
            line: 374,
            column: 93
          },
          end: {
            line: 376,
            column: 13
          }
        },
        line: 374
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 395,
            column: 32
          },
          end: {
            line: 395,
            column: 33
          }
        },
        loc: {
          start: {
            line: 395,
            column: 37
          },
          end: {
            line: 395,
            column: 46
          }
        },
        line: 395
      },
      "19": {
        name: "testRealtimeSubscriptions",
        decl: {
          start: {
            line: 410,
            column: 15
          },
          end: {
            line: 410,
            column: 40
          }
        },
        loc: {
          start: {
            line: 410,
            column: 43
          },
          end: {
            line: 486,
            column: 1
          }
        },
        line: 410
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 420,
            column: 82
          },
          end: {
            line: 420,
            column: 83
          }
        },
        loc: {
          start: {
            line: 420,
            column: 95
          },
          end: {
            line: 423,
            column: 9
          }
        },
        line: 420
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 425,
            column: 26
          },
          end: {
            line: 425,
            column: 27
          }
        },
        loc: {
          start: {
            line: 425,
            column: 37
          },
          end: {
            line: 425,
            column: 62
          }
        },
        line: 425
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 450,
            column: 92
          },
          end: {
            line: 450,
            column: 93
          }
        },
        loc: {
          start: {
            line: 450,
            column: 105
          },
          end: {
            line: 452,
            column: 9
          }
        },
        line: 450
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 454,
            column: 26
          },
          end: {
            line: 454,
            column: 27
          }
        },
        loc: {
          start: {
            line: 454,
            column: 37
          },
          end: {
            line: 454,
            column: 62
          }
        },
        line: 454
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 475,
            column: 32
          },
          end: {
            line: 475,
            column: 33
          }
        },
        loc: {
          start: {
            line: 475,
            column: 37
          },
          end: {
            line: 475,
            column: 46
          }
        },
        line: 475
      },
      "25": {
        name: "testPerformanceBenchmarks",
        decl: {
          start: {
            line: 490,
            column: 15
          },
          end: {
            line: 490,
            column: 40
          }
        },
        loc: {
          start: {
            line: 490,
            column: 43
          },
          end: {
            line: 581,
            column: 1
          }
        },
        line: 490
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 499,
            column: 73
          },
          end: {
            line: 499,
            column: 74
          }
        },
        loc: {
          start: {
            line: 499,
            column: 85
          },
          end: {
            line: 501,
            column: 13
          }
        },
        line: 499
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 504,
            column: 45
          },
          end: {
            line: 504,
            column: 46
          }
        },
        loc: {
          start: {
            line: 504,
            column: 57
          },
          end: {
            line: 504,
            column: 64
          }
        },
        line: 504
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 545,
            column: 52
          },
          end: {
            line: 545,
            column: 53
          }
        },
        loc: {
          start: {
            line: 545,
            column: 57
          },
          end: {
            line: 545,
            column: 66
          }
        },
        line: 545
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 557,
            column: 37
          },
          end: {
            line: 557,
            column: 38
          }
        },
        loc: {
          start: {
            line: 557,
            column: 43
          },
          end: {
            line: 557,
            column: 87
          }
        },
        line: 557
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 570,
            column: 32
          },
          end: {
            line: 570,
            column: 33
          }
        },
        loc: {
          start: {
            line: 570,
            column: 37
          },
          end: {
            line: 570,
            column: 46
          }
        },
        line: 570
      },
      "31": {
        name: "runAllDatabaseTests",
        decl: {
          start: {
            line: 585,
            column: 15
          },
          end: {
            line: 585,
            column: 34
          }
        },
        loc: {
          start: {
            line: 585,
            column: 37
          },
          end: {
            line: 633,
            column: 1
          }
        },
        line: 585
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 599,
            column: 33
          },
          end: {
            line: 599,
            column: 34
          }
        },
        loc: {
          start: {
            line: 599,
            column: 49
          },
          end: {
            line: 599,
            column: 74
          }
        },
        line: 599
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 600,
            column: 34
          },
          end: {
            line: 600,
            column: 35
          }
        },
        loc: {
          start: {
            line: 600,
            column: 50
          },
          end: {
            line: 600,
            column: 76
          }
        },
        line: 600
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 601,
            column: 34
          },
          end: {
            line: 601,
            column: 35
          }
        },
        loc: {
          start: {
            line: 601,
            column: 50
          },
          end: {
            line: 601,
            column: 76
          }
        },
        line: 601
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 607,
            column: 23
          },
          end: {
            line: 607,
            column: 24
          }
        },
        loc: {
          start: {
            line: 607,
            column: 32
          },
          end: {
            line: 617,
            column: 9
          }
        },
        line: 607
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 613,
            column: 35
          },
          end: {
            line: 613,
            column: 36
          }
        },
        loc: {
          start: {
            line: 613,
            column: 40
          },
          end: {
            line: 613,
            column: 50
          }
        },
        line: 613
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 613,
            column: 60
          },
          end: {
            line: 613,
            column: 61
          }
        },
        loc: {
          start: {
            line: 613,
            column: 68
          },
          end: {
            line: 615,
            column: 17
          }
        },
        line: 613
      },
      "38": {
        name: "validatePhase1_2",
        decl: {
          start: {
            line: 637,
            column: 15
          },
          end: {
            line: 637,
            column: 31
          }
        },
        loc: {
          start: {
            line: 637,
            column: 34
          },
          end: {
            line: 674,
            column: 1
          }
        },
        line: 637
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 648,
            column: 40
          },
          end: {
            line: 648,
            column: 41
          }
        },
        loc: {
          start: {
            line: 648,
            column: 49
          },
          end: {
            line: 648,
            column: 60
          }
        },
        line: 648
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 649,
            column: 46
          },
          end: {
            line: 649,
            column: 47
          }
        },
        loc: {
          start: {
            line: 649,
            column: 54
          },
          end: {
            line: 649,
            column: 114
          }
        },
        line: 649
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 649,
            column: 73
          },
          end: {
            line: 649,
            column: 74
          }
        },
        loc: {
          start: {
            line: 649,
            column: 85
          },
          end: {
            line: 649,
            column: 113
          }
        },
        line: 649
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 650,
            column: 52
          },
          end: {
            line: 650,
            column: 53
          }
        },
        loc: {
          start: {
            line: 650,
            column: 60
          },
          end: {
            line: 650,
            column: 72
          }
        },
        line: 650
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 654,
            column: 30
          },
          end: {
            line: 654,
            column: 31
          }
        },
        loc: {
          start: {
            line: 654,
            column: 46
          },
          end: {
            line: 658,
            column: 9
          }
        },
        line: 654
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 655,
            column: 44
          },
          end: {
            line: 655,
            column: 45
          }
        },
        loc: {
          start: {
            line: 655,
            column: 49
          },
          end: {
            line: 655,
            column: 78
          }
        },
        line: 655
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 51,
            column: 21
          },
          end: {
            line: 51,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 38
          },
          end: {
            line: 51,
            column: 70
          }
        }, {
          start: {
            line: 51,
            column: 73
          },
          end: {
            line: 51,
            column: 117
          }
        }],
        line: 51
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 73
          },
          end: {
            line: 51,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 73
          },
          end: {
            line: 51,
            column: 94
          }
        }, {
          start: {
            line: 51,
            column: 98
          },
          end: {
            line: 51,
            column: 117
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 61,
            column: 19
          },
          end: {
            line: 61,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 44
          },
          end: {
            line: 61,
            column: 57
          }
        }, {
          start: {
            line: 61,
            column: 60
          },
          end: {
            line: 61,
            column: 73
          }
        }],
        line: 61
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 21
          },
          end: {
            line: 73,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 38
          },
          end: {
            line: 73,
            column: 85
          }
        }, {
          start: {
            line: 73,
            column: 88
          },
          end: {
            line: 73,
            column: 115
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 83,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 44
          },
          end: {
            line: 83,
            column: 57
          }
        }, {
          start: {
            line: 83,
            column: 60
          },
          end: {
            line: 83,
            column: 73
          }
        }],
        line: 83
      },
      "5": {
        loc: {
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 95,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 37
          },
          end: {
            line: 95,
            column: 58
          }
        }, {
          start: {
            line: 95,
            column: 61
          },
          end: {
            line: 95,
            column: 85
          }
        }],
        line: 95
      },
      "6": {
        loc: {
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 57
          }
        }, {
          start: {
            line: 104,
            column: 60
          },
          end: {
            line: 104,
            column: 73
          }
        }],
        line: 104
      },
      "7": {
        loc: {
          start: {
            line: 143,
            column: 21
          },
          end: {
            line: 143,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 143,
            column: 38
          },
          end: {
            line: 143,
            column: 65
          }
        }, {
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 143,
            column: 110
          }
        }],
        line: 143
      },
      "8": {
        loc: {
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 143,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 143,
            column: 89
          }
        }, {
          start: {
            line: 143,
            column: 93
          },
          end: {
            line: 143,
            column: 110
          }
        }],
        line: 143
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 149,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 156,
            column: 19
          },
          end: {
            line: 156,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 156,
            column: 44
          },
          end: {
            line: 156,
            column: 57
          }
        }, {
          start: {
            line: 156,
            column: 60
          },
          end: {
            line: 156,
            column: 73
          }
        }],
        line: 156
      },
      "11": {
        loc: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "12": {
        loc: {
          start: {
            line: 168,
            column: 25
          },
          end: {
            line: 168,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 42
          },
          end: {
            line: 168,
            column: 71
          }
        }, {
          start: {
            line: 168,
            column: 74
          },
          end: {
            line: 168,
            column: 117
          }
        }],
        line: 168
      },
      "13": {
        loc: {
          start: {
            line: 168,
            column: 74
          },
          end: {
            line: 168,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 74
          },
          end: {
            line: 168,
            column: 95
          }
        }, {
          start: {
            line: 168,
            column: 99
          },
          end: {
            line: 168,
            column: 117
          }
        }],
        line: 168
      },
      "14": {
        loc: {
          start: {
            line: 178,
            column: 23
          },
          end: {
            line: 178,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 178,
            column: 48
          },
          end: {
            line: 178,
            column: 61
          }
        }, {
          start: {
            line: 178,
            column: 64
          },
          end: {
            line: 178,
            column: 77
          }
        }],
        line: 178
      },
      "15": {
        loc: {
          start: {
            line: 192,
            column: 25
          },
          end: {
            line: 192,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 42
          },
          end: {
            line: 192,
            column: 69
          }
        }, {
          start: {
            line: 192,
            column: 72
          },
          end: {
            line: 192,
            column: 112
          }
        }],
        line: 192
      },
      "16": {
        loc: {
          start: {
            line: 192,
            column: 72
          },
          end: {
            line: 192,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 72
          },
          end: {
            line: 192,
            column: 93
          }
        }, {
          start: {
            line: 192,
            column: 97
          },
          end: {
            line: 192,
            column: 112
          }
        }],
        line: 192
      },
      "17": {
        loc: {
          start: {
            line: 202,
            column: 23
          },
          end: {
            line: 202,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 48
          },
          end: {
            line: 202,
            column: 61
          }
        }, {
          start: {
            line: 202,
            column: 64
          },
          end: {
            line: 202,
            column: 77
          }
        }],
        line: 202
      },
      "18": {
        loc: {
          start: {
            line: 213,
            column: 25
          },
          end: {
            line: 213,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 42
          },
          end: {
            line: 213,
            column: 74
          }
        }, {
          start: {
            line: 213,
            column: 77
          },
          end: {
            line: 213,
            column: 117
          }
        }],
        line: 213
      },
      "19": {
        loc: {
          start: {
            line: 213,
            column: 77
          },
          end: {
            line: 213,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 213,
            column: 77
          },
          end: {
            line: 213,
            column: 98
          }
        }, {
          start: {
            line: 213,
            column: 102
          },
          end: {
            line: 213,
            column: 117
          }
        }],
        line: 213
      },
      "20": {
        loc: {
          start: {
            line: 223,
            column: 23
          },
          end: {
            line: 223,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 223,
            column: 48
          },
          end: {
            line: 223,
            column: 61
          }
        }, {
          start: {
            line: 223,
            column: 64
          },
          end: {
            line: 223,
            column: 77
          }
        }],
        line: 223
      },
      "21": {
        loc: {
          start: {
            line: 267,
            column: 21
          },
          end: {
            line: 267,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 38
          },
          end: {
            line: 267,
            column: 66
          }
        }, {
          start: {
            line: 267,
            column: 69
          },
          end: {
            line: 267,
            column: 111
          }
        }],
        line: 267
      },
      "22": {
        loc: {
          start: {
            line: 267,
            column: 69
          },
          end: {
            line: 267,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 69
          },
          end: {
            line: 267,
            column: 90
          }
        }, {
          start: {
            line: 267,
            column: 94
          },
          end: {
            line: 267,
            column: 111
          }
        }],
        line: 267
      },
      "23": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "24": {
        loc: {
          start: {
            line: 280,
            column: 19
          },
          end: {
            line: 280,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 44
          },
          end: {
            line: 280,
            column: 57
          }
        }, {
          start: {
            line: 280,
            column: 60
          },
          end: {
            line: 280,
            column: 73
          }
        }],
        line: 280
      },
      "25": {
        loc: {
          start: {
            line: 291,
            column: 21
          },
          end: {
            line: 291,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 38
          },
          end: {
            line: 291,
            column: 84
          }
        }, {
          start: {
            line: 291,
            column: 87
          },
          end: {
            line: 291,
            column: 130
          }
        }],
        line: 291
      },
      "26": {
        loc: {
          start: {
            line: 291,
            column: 51
          },
          end: {
            line: 291,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 51
          },
          end: {
            line: 291,
            column: 70
          }
        }, {
          start: {
            line: 291,
            column: 74
          },
          end: {
            line: 291,
            column: 75
          }
        }],
        line: 291
      },
      "27": {
        loc: {
          start: {
            line: 291,
            column: 87
          },
          end: {
            line: 291,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 87
          },
          end: {
            line: 291,
            column: 108
          }
        }, {
          start: {
            line: 291,
            column: 112
          },
          end: {
            line: 291,
            column: 130
          }
        }],
        line: 291
      },
      "28": {
        loc: {
          start: {
            line: 301,
            column: 19
          },
          end: {
            line: 301,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 44
          },
          end: {
            line: 301,
            column: 57
          }
        }, {
          start: {
            line: 301,
            column: 60
          },
          end: {
            line: 301,
            column: 73
          }
        }],
        line: 301
      },
      "29": {
        loc: {
          start: {
            line: 312,
            column: 21
          },
          end: {
            line: 312,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 312,
            column: 38
          },
          end: {
            line: 312,
            column: 91
          }
        }, {
          start: {
            line: 312,
            column: 94
          },
          end: {
            line: 312,
            column: 137
          }
        }],
        line: 312
      },
      "30": {
        loc: {
          start: {
            line: 312,
            column: 51
          },
          end: {
            line: 312,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 51
          },
          end: {
            line: 312,
            column: 70
          }
        }, {
          start: {
            line: 312,
            column: 74
          },
          end: {
            line: 312,
            column: 75
          }
        }],
        line: 312
      },
      "31": {
        loc: {
          start: {
            line: 312,
            column: 94
          },
          end: {
            line: 312,
            column: 137
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 94
          },
          end: {
            line: 312,
            column: 115
          }
        }, {
          start: {
            line: 312,
            column: 119
          },
          end: {
            line: 312,
            column: 137
          }
        }],
        line: 312
      },
      "32": {
        loc: {
          start: {
            line: 322,
            column: 19
          },
          end: {
            line: 322,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 44
          },
          end: {
            line: 322,
            column: 57
          }
        }, {
          start: {
            line: 322,
            column: 60
          },
          end: {
            line: 322,
            column: 73
          }
        }],
        line: 322
      },
      "33": {
        loc: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 393,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "34": {
        loc: {
          start: {
            line: 338,
            column: 25
          },
          end: {
            line: 338,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 338,
            column: 42
          },
          end: {
            line: 338,
            column: 70
          }
        }, {
          start: {
            line: 338,
            column: 73
          },
          end: {
            line: 338,
            column: 113
          }
        }],
        line: 338
      },
      "35": {
        loc: {
          start: {
            line: 338,
            column: 73
          },
          end: {
            line: 338,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 73
          },
          end: {
            line: 338,
            column: 94
          }
        }, {
          start: {
            line: 338,
            column: 98
          },
          end: {
            line: 338,
            column: 113
          }
        }],
        line: 338
      },
      "36": {
        loc: {
          start: {
            line: 348,
            column: 23
          },
          end: {
            line: 348,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 48
          },
          end: {
            line: 348,
            column: 61
          }
        }, {
          start: {
            line: 348,
            column: 64
          },
          end: {
            line: 348,
            column: 77
          }
        }],
        line: 348
      },
      "37": {
        loc: {
          start: {
            line: 359,
            column: 25
          },
          end: {
            line: 359,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 359,
            column: 42
          },
          end: {
            line: 359,
            column: 70
          }
        }, {
          start: {
            line: 359,
            column: 73
          },
          end: {
            line: 359,
            column: 113
          }
        }],
        line: 359
      },
      "38": {
        loc: {
          start: {
            line: 359,
            column: 73
          },
          end: {
            line: 359,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 73
          },
          end: {
            line: 359,
            column: 94
          }
        }, {
          start: {
            line: 359,
            column: 98
          },
          end: {
            line: 359,
            column: 113
          }
        }],
        line: 359
      },
      "39": {
        loc: {
          start: {
            line: 369,
            column: 23
          },
          end: {
            line: 369,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 369,
            column: 48
          },
          end: {
            line: 369,
            column: 61
          }
        }, {
          start: {
            line: 369,
            column: 64
          },
          end: {
            line: 369,
            column: 77
          }
        }],
        line: 369
      },
      "40": {
        loc: {
          start: {
            line: 380,
            column: 25
          },
          end: {
            line: 380,
            column: 115
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 380,
            column: 42
          },
          end: {
            line: 380,
            column: 70
          }
        }, {
          start: {
            line: 380,
            column: 73
          },
          end: {
            line: 380,
            column: 115
          }
        }],
        line: 380
      },
      "41": {
        loc: {
          start: {
            line: 380,
            column: 73
          },
          end: {
            line: 380,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 380,
            column: 73
          },
          end: {
            line: 380,
            column: 94
          }
        }, {
          start: {
            line: 380,
            column: 98
          },
          end: {
            line: 380,
            column: 115
          }
        }],
        line: 380
      },
      "42": {
        loc: {
          start: {
            line: 390,
            column: 23
          },
          end: {
            line: 390,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 48
          },
          end: {
            line: 390,
            column: 61
          }
        }, {
          start: {
            line: 390,
            column: 64
          },
          end: {
            line: 390,
            column: 77
          }
        }],
        line: 390
      },
      "43": {
        loc: {
          start: {
            line: 433,
            column: 21
          },
          end: {
            line: 433,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 433,
            column: 36
          },
          end: {
            line: 433,
            column: 75
          }
        }, {
          start: {
            line: 433,
            column: 78
          },
          end: {
            line: 433,
            column: 112
          }
        }],
        line: 433
      },
      "44": {
        loc: {
          start: {
            line: 443,
            column: 19
          },
          end: {
            line: 443,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 443,
            column: 44
          },
          end: {
            line: 443,
            column: 57
          }
        }, {
          start: {
            line: 443,
            column: 60
          },
          end: {
            line: 443,
            column: 73
          }
        }],
        line: 443
      },
      "45": {
        loc: {
          start: {
            line: 461,
            column: 21
          },
          end: {
            line: 461,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 461,
            column: 36
          },
          end: {
            line: 461,
            column: 83
          }
        }, {
          start: {
            line: 461,
            column: 86
          },
          end: {
            line: 461,
            column: 128
          }
        }],
        line: 461
      },
      "46": {
        loc: {
          start: {
            line: 471,
            column: 19
          },
          end: {
            line: 471,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 471,
            column: 44
          },
          end: {
            line: 471,
            column: 57
          }
        }, {
          start: {
            line: 471,
            column: 60
          },
          end: {
            line: 471,
            column: 73
          }
        }],
        line: 471
      },
      "47": {
        loc: {
          start: {
            line: 512,
            column: 21
          },
          end: {
            line: 514,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 513,
            column: 16
          },
          end: {
            line: 513,
            column: 88
          }
        }, {
          start: {
            line: 514,
            column: 16
          },
          end: {
            line: 514,
            column: 95
          }
        }],
        line: 512
      },
      "48": {
        loc: {
          start: {
            line: 530,
            column: 19
          },
          end: {
            line: 530,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 530,
            column: 44
          },
          end: {
            line: 530,
            column: 57
          }
        }, {
          start: {
            line: 530,
            column: 60
          },
          end: {
            line: 530,
            column: 73
          }
        }],
        line: 530
      },
      "49": {
        loc: {
          start: {
            line: 550,
            column: 21
          },
          end: {
            line: 552,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 551,
            column: 16
          },
          end: {
            line: 551,
            column: 85
          }
        }, {
          start: {
            line: 552,
            column: 16
          },
          end: {
            line: 552,
            column: 81
          }
        }],
        line: 550
      },
      "50": {
        loc: {
          start: {
            line: 566,
            column: 19
          },
          end: {
            line: 566,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 566,
            column: 44
          },
          end: {
            line: 566,
            column: 57
          }
        }, {
          start: {
            line: 566,
            column: 60
          },
          end: {
            line: 566,
            column: 73
          }
        }],
        line: 566
      },
      "51": {
        loc: {
          start: {
            line: 609,
            column: 32
          },
          end: {
            line: 609,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 609,
            column: 44
          },
          end: {
            line: 609,
            column: 79
          }
        }, {
          start: {
            line: 609,
            column: 82
          },
          end: {
            line: 609,
            column: 87
          }
        }],
        line: 609
      },
      "52": {
        loc: {
          start: {
            line: 610,
            column: 27
          },
          end: {
            line: 610,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 610,
            column: 42
          },
          end: {
            line: 610,
            column: 45
          }
        }, {
          start: {
            line: 610,
            column: 48
          },
          end: {
            line: 610,
            column: 51
          }
        }],
        line: 610
      },
      "53": {
        loc: {
          start: {
            line: 612,
            column: 12
          },
          end: {
            line: 616,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 612,
            column: 12
          },
          end: {
            line: 616,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 612
      },
      "54": {
        loc: {
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 621,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        }, {
          start: {
            line: 624,
            column: 13
          },
          end: {
            line: 626,
            column: 9
          }
        }],
        line: 621
      },
      "55": {
        loc: {
          start: {
            line: 656,
            column: 27
          },
          end: {
            line: 656,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 656,
            column: 43
          },
          end: {
            line: 656,
            column: 46
          }
        }, {
          start: {
            line: 656,
            column: 49
          },
          end: {
            line: 656,
            column: 52
          }
        }],
        line: 656
      },
      "56": {
        loc: {
          start: {
            line: 657,
            column: 54
          },
          end: {
            line: 657,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 657,
            column: 54
          },
          end: {
            line: 657,
            column: 67
          }
        }, {
          start: {
            line: 657,
            column: 71
          },
          end: {
            line: 657,
            column: 82
          }
        }],
        line: 657
      },
      "57": {
        loc: {
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 667,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 8
          },
          end: {
            line: 667,
            column: 9
          }
        }, {
          start: {
            line: 664,
            column: 13
          },
          end: {
            line: 667,
            column: 9
          }
        }],
        line: 660
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/yanivhadar/Desktop/White Noise Alarm/AlarmWhiteNoiseApp/src/lib/database/test-operations.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/yanivhadar/Desktop/White Noise Alarm/AlarmWhiteNoiseApp/src/lib/database/test-operations.ts"],
      sourcesContent: ["/**\n * Database Test Operations for Alarm & White Noise App\n * \n * Comprehensive testing suite for database operations, real-time functionality,\n * and performance validation. Use this to verify Phase 1.2 completion.\n */\n\nimport {\n  UserService,\n  AlarmService,\n  ActiveSessionService,\n  UserPreferencesService,\n  DatabaseHealthService,\n} from '../../services/database';\nimport { supabase } from '../supabase/client';\nimport type { User, Alarm, ActiveSession, UserPreferences } from '../../types/database';\n\n// Test results interface\ninterface TestResult {\n  test: string;\n  success: boolean;\n  message: string;\n  duration?: number;\n  data?: any;\n  error?: any;\n}\n\ninterface TestSuite {\n  suite: string;\n  tests: TestResult[];\n  summary: {\n    total: number;\n    passed: number;\n    failed: number;\n    duration: number;\n  };\n}\n\n/**\n * Performance benchmark for database operations\n */\nclass PerformanceBenchmark {\n  private startTime: number = 0;\n\n  start() {\n    this.startTime = performance.now();\n  }\n\n  end(): number {\n    return performance.now() - this.startTime;\n  }\n\n  static async measureAsync<T>(operation: () => Promise<T>): Promise<{ result: T; duration: number }> {\n    const start = performance.now();\n    const result = await operation();\n    const duration = performance.now() - start;\n    return { result, duration };\n  }\n}\n\n/**\n * Test database health and connectivity\n */\nexport async function testDatabaseHealth(): Promise<TestSuite> {\n  const tests: TestResult[] = [];\n  const suiteStart = performance.now();\n\n  // Test 1: Basic connectivity\n  try {\n    const benchmark = new PerformanceBenchmark();\n    benchmark.start();\n    \n    const result = await DatabaseHealthService.healthCheck();\n    const duration = benchmark.end();\n\n    tests.push({\n      test: 'Database Connectivity',\n      success: result.success,\n      message: result.success ? 'Database connection successful' : result.error?.message || 'Connection failed',\n      duration,\n      data: result.data,\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Database Connectivity',\n      success: false,\n      message: 'Exception during connectivity test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 2: Performance metrics\n  try {\n    const benchmark = new PerformanceBenchmark();\n    benchmark.start();\n    \n    const result = await DatabaseHealthService.getMetrics();\n    const duration = benchmark.end();\n\n    tests.push({\n      test: 'Performance Metrics',\n      success: result.success,\n      message: result.success ? `Response time: ${result.data?.responseTime}ms` : 'Metrics collection failed',\n      duration,\n      data: result.data,\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Performance Metrics',\n      success: false,\n      message: 'Exception during metrics test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 3: Authentication check\n  try {\n    const benchmark = new PerformanceBenchmark();\n    benchmark.start();\n    \n    const session = await supabase.auth.getSession();\n    const duration = benchmark.end();\n\n    tests.push({\n      test: 'Authentication System',\n      success: !session.error,\n      message: session.error ? session.error.message : 'Auth system accessible',\n      duration,\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Authentication System',\n      success: false,\n      message: 'Exception during auth test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  const suiteDuration = performance.now() - suiteStart;\n  const passed = tests.filter(t => t.success).length;\n\n  return {\n    suite: 'Database Health',\n    tests,\n    summary: {\n      total: tests.length,\n      passed,\n      failed: tests.length - passed,\n      duration: suiteDuration,\n    },\n  };\n}\n\n/**\n * Test user operations (CRUD)\n */\nexport async function testUserOperations(): Promise<TestSuite> {\n  const tests: TestResult[] = [];\n  const suiteStart = performance.now();\n  let testUser: User | null = null;\n\n  // Generate test user data\n  const testUserId = '12345678-1234-1234-1234-123456789012'; // Mock UUID for testing\n  const testUserData = {\n    id: testUserId,\n    email: `test-${Date.now()}@example.com`,\n    full_name: 'Test User',\n    timezone: 'America/New_York',\n  };\n\n  // Test 1: Create user\n  try {\n    const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n      return UserService.create(testUserData);\n    });\n\n    tests.push({\n      test: 'User Creation',\n      success: result.success,\n      message: result.success ? 'User created successfully' : result.error?.message || 'Creation failed',\n      duration,\n      data: result.data,\n    });\n\n    if (result.success) {\n      testUser = result.data;\n    }\n  } catch (error) {\n    tests.push({\n      test: 'User Creation',\n      success: false,\n      message: 'Exception during user creation',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 2: Get user by ID\n  if (testUser) {\n    try {\n      const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return UserService.getById(testUser!.id);\n      });\n\n      tests.push({\n        test: 'User Retrieval',\n        success: result.success,\n        message: result.success ? 'User retrieved successfully' : result.error?.message || 'Retrieval failed',\n        duration,\n        data: result.data,\n      });\n    } catch (error) {\n      tests.push({\n        test: 'User Retrieval',\n        success: false,\n        message: 'Exception during user retrieval',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    // Test 3: Update user\n    try {\n      const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return UserService.update(testUser!.id, {\n          full_name: 'Updated Test User',\n          is_premium: true,\n        });\n      });\n\n      tests.push({\n        test: 'User Update',\n        success: result.success,\n        message: result.success ? 'User updated successfully' : result.error?.message || 'Update failed',\n        duration,\n        data: result.data,\n      });\n    } catch (error) {\n      tests.push({\n        test: 'User Update',\n        success: false,\n        message: 'Exception during user update',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    // Test 4: Update last seen\n    try {\n      const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return UserService.updateLastSeen(testUser!.id);\n      });\n\n      tests.push({\n        test: 'Last Seen Update',\n        success: result.success,\n        message: result.success ? 'Last seen updated successfully' : result.error?.message || 'Update failed',\n        duration,\n        data: result.data,\n      });\n    } catch (error) {\n      tests.push({\n        test: 'Last Seen Update',\n        success: false,\n        message: 'Exception during last seen update',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  const suiteDuration = performance.now() - suiteStart;\n  const passed = tests.filter(t => t.success).length;\n\n  return {\n    suite: 'User Operations',\n    tests,\n    summary: {\n      total: tests.length,\n      passed,\n      failed: tests.length - passed,\n      duration: suiteDuration,\n    },\n  };\n}\n\n/**\n * Test alarm operations with performance benchmarks\n */\nexport async function testAlarmOperations(): Promise<TestSuite> {\n  const tests: TestResult[] = [];\n  const suiteStart = performance.now();\n  let testAlarm: Alarm | null = null;\n\n  const testUserId = '12345678-1234-1234-1234-123456789012';\n  const testAlarmData = {\n    user_id: testUserId,\n    name: 'Test Alarm',\n    time: '07:00',\n    enabled: true,\n    repeat_pattern: 'daily' as const,\n    volume: 0.8,\n    white_noise_enabled: true,\n    white_noise_category: 'nature' as const,\n    white_noise_volume: 0.5,\n  };\n\n  // Test 1: Create alarm\n  try {\n    const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n      return AlarmService.create(testAlarmData);\n    });\n\n    tests.push({\n      test: 'Alarm Creation',\n      success: result.success,\n      message: result.success ? 'Alarm created successfully' : result.error?.message || 'Creation failed',\n      duration,\n      data: result.data,\n    });\n\n    if (result.success) {\n      testAlarm = result.data;\n    }\n  } catch (error) {\n    tests.push({\n      test: 'Alarm Creation',\n      success: false,\n      message: 'Exception during alarm creation',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 2: Get alarms by user\n  try {\n    const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n      return AlarmService.getByUser(testUserId);\n    });\n\n    tests.push({\n      test: 'Alarm Retrieval by User',\n      success: result.success,\n      message: result.success ? `Retrieved ${result.data?.length || 0} alarms` : result.error?.message || 'Retrieval failed',\n      duration,\n      data: result.pagination,\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Alarm Retrieval by User',\n      success: false,\n      message: 'Exception during alarm retrieval',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 3: Get active alarms\n  try {\n    const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n      return AlarmService.getActiveByUser(testUserId);\n    });\n\n    tests.push({\n      test: 'Active Alarms Retrieval',\n      success: result.success,\n      message: result.success ? `Retrieved ${result.data?.length || 0} active alarms` : result.error?.message || 'Retrieval failed',\n      duration,\n      data: result.data,\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Active Alarms Retrieval',\n      success: false,\n      message: 'Exception during active alarms retrieval',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 4: Update alarm\n  if (testAlarm) {\n    try {\n      const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return AlarmService.update(testAlarm!.id, {\n          name: 'Updated Test Alarm',\n          volume: 0.9,\n          enabled: false,\n        });\n      });\n\n      tests.push({\n        test: 'Alarm Update',\n        success: result.success,\n        message: result.success ? 'Alarm updated successfully' : result.error?.message || 'Update failed',\n        duration,\n        data: result.data,\n      });\n    } catch (error) {\n      tests.push({\n        test: 'Alarm Update',\n        success: false,\n        message: 'Exception during alarm update',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    // Test 5: Toggle alarm\n    try {\n      const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return AlarmService.toggle(testAlarm!.id, true);\n      });\n\n      tests.push({\n        test: 'Alarm Toggle',\n        success: result.success,\n        message: result.success ? 'Alarm toggled successfully' : result.error?.message || 'Toggle failed',\n        duration,\n        data: result.data,\n      });\n    } catch (error) {\n      tests.push({\n        test: 'Alarm Toggle',\n        success: false,\n        message: 'Exception during alarm toggle',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n\n    // Test 6: Delete alarm\n    try {\n      const { result, duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return AlarmService.delete(testAlarm!.id);\n      });\n\n      tests.push({\n        test: 'Alarm Deletion',\n        success: result.success,\n        message: result.success ? 'Alarm deleted successfully' : result.error?.message || 'Deletion failed',\n        duration,\n        data: result.data,\n      });\n    } catch (error) {\n      tests.push({\n        test: 'Alarm Deletion',\n        success: false,\n        message: 'Exception during alarm deletion',\n        error: error instanceof Error ? error.message : String(error),\n      });\n    }\n  }\n\n  const suiteDuration = performance.now() - suiteStart;\n  const passed = tests.filter(t => t.success).length;\n\n  return {\n    suite: 'Alarm Operations',\n    tests,\n    summary: {\n      total: tests.length,\n      passed,\n      failed: tests.length - passed,\n      duration: suiteDuration,\n    },\n  };\n}\n\n/**\n * Test real-time functionality\n */\nexport async function testRealtimeSubscriptions(): Promise<TestSuite> {\n  const tests: TestResult[] = [];\n  const suiteStart = performance.now();\n\n  const testUserId = '12345678-1234-1234-1234-123456789012';\n\n  // Test 1: Alarm subscription\n  try {\n    const benchmark = new PerformanceBenchmark();\n    benchmark.start();\n\n    let subscriptionWorks = false;\n    let subscriptionError: any = null;\n\n    const channel = AlarmService.subscribeToUserAlarms(testUserId, (payload) => {\n      console.log('Real-time alarm update received:', payload);\n      subscriptionWorks = true;\n    });\n\n    // Wait a moment to establish connection\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    const duration = benchmark.end();\n\n    // Check if channel is subscribed\n    const isSubscribed = channel.state === 'joined';\n\n    await channel.unsubscribe();\n\n    tests.push({\n      test: 'Alarm Real-time Subscription',\n      success: isSubscribed,\n      message: isSubscribed ? 'Subscription established successfully' : 'Failed to establish subscription',\n      duration,\n      data: { channel_state: channel.state },\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Alarm Real-time Subscription',\n      success: false,\n      message: 'Exception during subscription test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 2: Session subscription\n  try {\n    const benchmark = new PerformanceBenchmark();\n    benchmark.start();\n\n    const channel = ActiveSessionService.subscribeToUserSessions(testUserId, (payload) => {\n      console.log('Real-time session update received:', payload);\n    });\n\n    // Wait a moment to establish connection\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    const duration = benchmark.end();\n    const isSubscribed = channel.state === 'joined';\n\n    await channel.unsubscribe();\n\n    tests.push({\n      test: 'Session Real-time Subscription',\n      success: isSubscribed,\n      message: isSubscribed ? 'Session subscription established successfully' : 'Failed to establish session subscription',\n      duration,\n      data: { channel_state: channel.state },\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Session Real-time Subscription',\n      success: false,\n      message: 'Exception during session subscription test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  const suiteDuration = performance.now() - suiteStart;\n  const passed = tests.filter(t => t.success).length;\n\n  return {\n    suite: 'Real-time Subscriptions',\n    tests,\n    summary: {\n      total: tests.length,\n      passed,\n      failed: tests.length - passed,\n      duration: suiteDuration,\n    },\n  };\n}\n\n/**\n * Performance benchmark tests\n */\nexport async function testPerformanceBenchmarks(): Promise<TestSuite> {\n  const tests: TestResult[] = [];\n  const suiteStart = performance.now();\n\n  const testUserId = '12345678-1234-1234-1234-123456789012';\n\n  // Test 1: Query performance (should be < 50ms as per requirements)\n  try {\n    const iterations = 10;\n    const durations: number[] = [];\n\n    for (let i = 0; i < iterations; i++) {\n      const { duration } = await PerformanceBenchmark.measureAsync(async () => {\n        return AlarmService.getByUser(testUserId, { page: 1, limit: 20 });\n      });\n      durations.push(duration);\n    }\n\n    const avgDuration = durations.reduce((sum, d) => sum + d, 0) / iterations;\n    const maxDuration = Math.max(...durations);\n    const minDuration = Math.min(...durations);\n\n    const performanceTarget = 50; // ms\n    const success = avgDuration < performanceTarget;\n\n    tests.push({\n      test: 'Query Performance (<50ms)',\n      success,\n      message: success ? \n        `Average: ${avgDuration.toFixed(2)}ms (Target: <${performanceTarget}ms)` :\n        `Average: ${avgDuration.toFixed(2)}ms exceeds target of ${performanceTarget}ms`,\n      duration: avgDuration,\n      data: {\n        average: avgDuration,\n        min: minDuration,\n        max: maxDuration,\n        target: performanceTarget,\n        iterations,\n      },\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Query Performance (<50ms)',\n      success: false,\n      message: 'Exception during performance test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  // Test 2: Concurrent operations\n  try {\n    const benchmark = new PerformanceBenchmark();\n    benchmark.start();\n\n    const promises = [\n      UserService.getById(testUserId),\n      AlarmService.getByUser(testUserId),\n      ActiveSessionService.getActiveByUser(testUserId),\n      UserPreferencesService.getByUser(testUserId),\n    ];\n\n    const results = await Promise.all(promises);\n    const duration = benchmark.end();\n\n    const successfulOperations = results.filter(r => r.success).length;\n    const success = successfulOperations === promises.length;\n\n    tests.push({\n      test: 'Concurrent Operations',\n      success,\n      message: success ? \n        `All ${promises.length} concurrent operations completed successfully` :\n        `${successfulOperations}/${promises.length} operations succeeded`,\n      duration,\n      data: {\n        total: promises.length,\n        successful: successfulOperations,\n        results: results.map(r => ({ success: r.success, error: r.error?.code })),\n      },\n    });\n  } catch (error) {\n    tests.push({\n      test: 'Concurrent Operations',\n      success: false,\n      message: 'Exception during concurrent operations test',\n      error: error instanceof Error ? error.message : String(error),\n    });\n  }\n\n  const suiteDuration = performance.now() - suiteStart;\n  const passed = tests.filter(t => t.success).length;\n\n  return {\n    suite: 'Performance Benchmarks',\n    tests,\n    summary: {\n      total: tests.length,\n      passed,\n      failed: tests.length - passed,\n      duration: suiteDuration,\n    },\n  };\n}\n\n/**\n * Run all database tests\n */\nexport async function runAllDatabaseTests(): Promise<{\n  overall: {\n    total: number;\n    passed: number;\n    failed: number;\n    duration: number;\n  };\n  suites: TestSuite[];\n}> {\n  const overallStart = performance.now();\n  \n  console.log('\uD83E\uDDEA Starting comprehensive database tests...\\n');\n\n  const suites: TestSuite[] = [];\n\n  try {\n    // Run test suites\n    suites.push(await testDatabaseHealth());\n    suites.push(await testUserOperations());\n    suites.push(await testAlarmOperations());\n    suites.push(await testRealtimeSubscriptions());\n    suites.push(await testPerformanceBenchmarks());\n\n    const overallDuration = performance.now() - overallStart;\n\n    // Calculate overall summary\n    const overall = {\n      total: suites.reduce((sum, suite) => sum + suite.summary.total, 0),\n      passed: suites.reduce((sum, suite) => sum + suite.summary.passed, 0),\n      failed: suites.reduce((sum, suite) => sum + suite.summary.failed, 0),\n      duration: overallDuration,\n    };\n\n    // Print results\n    console.log('\\n\uD83D\uDCCA Test Results Summary:');\n    console.log('=' .repeat(50));\n    \n    suites.forEach(suite => {\n      const { total, passed, failed, duration } = suite.summary;\n      const successRate = total > 0 ? ((passed / total) * 100).toFixed(1) : '0.0';\n      const status = failed === 0 ? '\u2705' : '\u274C';\n      \n      console.log(`${status} ${suite.suite}: ${passed}/${total} (${successRate}%) - ${duration.toFixed(2)}ms`);\n      \n      if (failed > 0) {\n        suite.tests.filter(t => !t.success).forEach(test => {\n          console.log(`   \u274C ${test.test}: ${test.message}`);\n        });\n      }\n    });\n\n    console.log('=' .repeat(50));\n    console.log(`\uD83D\uDCC8 Overall: ${overall.passed}/${overall.total} tests passed (${((overall.passed / overall.total) * 100).toFixed(1)}%)`);\n    console.log(`\u23F1\uFE0F Total Duration: ${overall.duration.toFixed(2)}ms`);\n    \n    if (overall.failed === 0) {\n      console.log('\uD83C\uDF89 All tests passed! Database is ready for production.');\n    } else {\n      console.log(`\u26A0\uFE0F  ${overall.failed} test(s) failed. Please review and fix issues.`);\n    }\n\n    return { overall, suites };\n  } catch (error) {\n    console.error('\uD83D\uDCA5 Test suite execution failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Quick validation test for Phase 1.2 completion\n */\nexport async function validatePhase1_2(): Promise<boolean> {\n  console.log('\uD83D\uDD0D Validating Phase 1.2: Supabase Backend Foundation...\\n');\n\n  const requiredTests = [\n    'Database Connectivity',\n    'User Creation',\n    'Alarm Creation',\n    'Query Performance (<50ms)',\n    'Alarm Real-time Subscription',\n  ];\n\n  try {\n    const { suites } = await runAllDatabaseTests();\n    \n    const allTests = suites.flatMap(suite => suite.tests);\n    const criticalTests = allTests.filter(test => \n      requiredTests.some(required => test.test.includes(required))\n    );\n\n    const criticalPassed = criticalTests.filter(test => test.success).length;\n    const success = criticalPassed === requiredTests.length;\n\n    console.log('\\n\uD83C\uDFAF Phase 1.2 Validation:');\n    console.log('=' .repeat(50));\n    requiredTests.forEach(requiredTest => {\n      const test = criticalTests.find(t => t.test.includes(requiredTest));\n      const status = test?.success ? '\u2705' : '\u274C';\n      console.log(`${status} ${requiredTest}: ${test?.message || 'Not found'}`);\n    });\n\n    console.log('=' .repeat(50));\n    if (success) {\n      console.log('\u2705 Phase 1.2: Supabase Backend Foundation - COMPLETED');\n      console.log('\u2728 Ready to proceed to Phase 2: Core Sleep System');\n    } else {\n      console.log('\u274C Phase 1.2: Supabase Backend Foundation - INCOMPLETE');\n      console.log(`\u26A0\uFE0F  ${requiredTests.length - criticalPassed}/${requiredTests.length} critical requirements not met`);\n    }\n\n    return success;\n  } catch (error) {\n    console.error('\uD83D\uDCA5 Phase 1.2 validation failed:', error);\n    return false;\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "57d1b967e938ce04e5d16fc3f666286f78ab1493"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ege9wdjbo = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ege9wdjbo();
cov_1ege9wdjbo().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ege9wdjbo().s[1]++;
exports.testDatabaseHealth = testDatabaseHealth;
/* istanbul ignore next */
cov_1ege9wdjbo().s[2]++;
exports.testUserOperations = testUserOperations;
/* istanbul ignore next */
cov_1ege9wdjbo().s[3]++;
exports.testAlarmOperations = testAlarmOperations;
/* istanbul ignore next */
cov_1ege9wdjbo().s[4]++;
exports.testRealtimeSubscriptions = testRealtimeSubscriptions;
/* istanbul ignore next */
cov_1ege9wdjbo().s[5]++;
exports.testPerformanceBenchmarks = testPerformanceBenchmarks;
/* istanbul ignore next */
cov_1ege9wdjbo().s[6]++;
exports.runAllDatabaseTests = runAllDatabaseTests;
/* istanbul ignore next */
cov_1ege9wdjbo().s[7]++;
exports.validatePhase1_2 = validatePhase1_2;
const database_1 =
/* istanbul ignore next */
(cov_1ege9wdjbo().s[8]++, require("../../services/database"));
const client_1 =
/* istanbul ignore next */
(cov_1ege9wdjbo().s[9]++, require("../supabase/client"));
/**
 * Performance benchmark for database operations
 */
class PerformanceBenchmark {
  startTime =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[10]++, 0);
  start() {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[0]++;
    cov_1ege9wdjbo().s[11]++;
    this.startTime = performance.now();
  }
  end() {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[1]++;
    cov_1ege9wdjbo().s[12]++;
    return performance.now() - this.startTime;
  }
  static async measureAsync(operation) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[2]++;
    const start =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[13]++, performance.now());
    const result =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[14]++, await operation());
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[15]++, performance.now() - start);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[16]++;
    return {
      result,
      duration
    };
  }
}
/**
 * Test database health and connectivity
 */
async function testDatabaseHealth() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[3]++;
  const tests =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[17]++, []);
  const suiteStart =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[18]++, performance.now());
  // Test 1: Basic connectivity
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[19]++;
  try {
    const benchmark =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[20]++, new PerformanceBenchmark());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[21]++;
    benchmark.start();
    const result =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[22]++, await database_1.DatabaseHealthService.healthCheck());
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[23]++, benchmark.end());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[24]++;
    tests.push({
      test: 'Database Connectivity',
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[0][0]++, 'Database connection successful') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[0][1]++,
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[1][0]++, result.error?.message) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[1][1]++, 'Connection failed')),
      duration,
      data: result.data
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[25]++;
    tests.push({
      test: 'Database Connectivity',
      success: false,
      message: 'Exception during connectivity test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[2][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[2][1]++, String(error))
    });
  }
  // Test 2: Performance metrics
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[26]++;
  try {
    const benchmark =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[27]++, new PerformanceBenchmark());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[28]++;
    benchmark.start();
    const result =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[29]++, await database_1.DatabaseHealthService.getMetrics());
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[30]++, benchmark.end());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[31]++;
    tests.push({
      test: 'Performance Metrics',
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[3][0]++, `Response time: ${result.data?.responseTime}ms`) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[3][1]++, 'Metrics collection failed'),
      duration,
      data: result.data
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[32]++;
    tests.push({
      test: 'Performance Metrics',
      success: false,
      message: 'Exception during metrics test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[4][1]++, String(error))
    });
  }
  // Test 3: Authentication check
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[33]++;
  try {
    const benchmark =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[34]++, new PerformanceBenchmark());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[35]++;
    benchmark.start();
    const session =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[36]++, await client_1.supabase.auth.getSession());
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[37]++, benchmark.end());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[38]++;
    tests.push({
      test: 'Authentication System',
      success: !session.error,
      message: session.error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[5][0]++, session.error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[5][1]++, 'Auth system accessible'),
      duration
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[39]++;
    tests.push({
      test: 'Authentication System',
      success: false,
      message: 'Exception during auth test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[6][1]++, String(error))
    });
  }
  const suiteDuration =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[40]++, performance.now() - suiteStart);
  const passed =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[41]++, tests.filter(t => {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[4]++;
    cov_1ege9wdjbo().s[42]++;
    return t.success;
  }).length);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[43]++;
  return {
    suite: 'Database Health',
    tests,
    summary: {
      total: tests.length,
      passed,
      failed: tests.length - passed,
      duration: suiteDuration
    }
  };
}
/**
 * Test user operations (CRUD)
 */
async function testUserOperations() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[5]++;
  const tests =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[44]++, []);
  const suiteStart =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[45]++, performance.now());
  let testUser =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[46]++, null);
  // Generate test user data
  const testUserId =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[47]++, '12345678-1234-1234-1234-123456789012'); // Mock UUID for testing
  const testUserData =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[48]++, {
    id: testUserId,
    email: `test-${Date.now()}@example.com`,
    full_name: 'Test User',
    timezone: 'America/New_York'
  });
  // Test 1: Create user
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[49]++;
  try {
    const {
      result,
      duration
    } =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[50]++, await PerformanceBenchmark.measureAsync(async () => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[6]++;
      cov_1ege9wdjbo().s[51]++;
      return database_1.UserService.create(testUserData);
    }));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[52]++;
    tests.push({
      test: 'User Creation',
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[7][0]++, 'User created successfully') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[7][1]++,
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[8][0]++, result.error?.message) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[8][1]++, 'Creation failed')),
      duration,
      data: result.data
    });
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[53]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().b[9][0]++;
      cov_1ege9wdjbo().s[54]++;
      testUser = result.data;
    } else
    /* istanbul ignore next */
    {
      cov_1ege9wdjbo().b[9][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[55]++;
    tests.push({
      test: 'User Creation',
      success: false,
      message: 'Exception during user creation',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[10][1]++, String(error))
    });
  }
  // Test 2: Get user by ID
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[56]++;
  if (testUser) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().b[11][0]++;
    cov_1ege9wdjbo().s[57]++;
    try {
      const {
        result,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[58]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[7]++;
        cov_1ege9wdjbo().s[59]++;
        return database_1.UserService.getById(testUser.id);
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[60]++;
      tests.push({
        test: 'User Retrieval',
        success: result.success,
        message: result.success ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[12][0]++, 'User retrieved successfully') :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[12][1]++,
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[13][0]++, result.error?.message) ||
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[13][1]++, 'Retrieval failed')),
        duration,
        data: result.data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[61]++;
      tests.push({
        test: 'User Retrieval',
        success: false,
        message: 'Exception during user retrieval',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[14][1]++, String(error))
      });
    }
    // Test 3: Update user
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[62]++;
    try {
      const {
        result,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[63]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[8]++;
        cov_1ege9wdjbo().s[64]++;
        return database_1.UserService.update(testUser.id, {
          full_name: 'Updated Test User',
          is_premium: true
        });
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[65]++;
      tests.push({
        test: 'User Update',
        success: result.success,
        message: result.success ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[15][0]++, 'User updated successfully') :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[15][1]++,
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[16][0]++, result.error?.message) ||
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[16][1]++, 'Update failed')),
        duration,
        data: result.data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[66]++;
      tests.push({
        test: 'User Update',
        success: false,
        message: 'Exception during user update',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[17][1]++, String(error))
      });
    }
    // Test 4: Update last seen
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[67]++;
    try {
      const {
        result,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[68]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[9]++;
        cov_1ege9wdjbo().s[69]++;
        return database_1.UserService.updateLastSeen(testUser.id);
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[70]++;
      tests.push({
        test: 'Last Seen Update',
        success: result.success,
        message: result.success ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[18][0]++, 'Last seen updated successfully') :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[18][1]++,
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[19][0]++, result.error?.message) ||
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[19][1]++, 'Update failed')),
        duration,
        data: result.data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[71]++;
      tests.push({
        test: 'Last Seen Update',
        success: false,
        message: 'Exception during last seen update',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[20][1]++, String(error))
      });
    }
  } else
  /* istanbul ignore next */
  {
    cov_1ege9wdjbo().b[11][1]++;
  }
  const suiteDuration =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[72]++, performance.now() - suiteStart);
  const passed =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[73]++, tests.filter(t => {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[10]++;
    cov_1ege9wdjbo().s[74]++;
    return t.success;
  }).length);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[75]++;
  return {
    suite: 'User Operations',
    tests,
    summary: {
      total: tests.length,
      passed,
      failed: tests.length - passed,
      duration: suiteDuration
    }
  };
}
/**
 * Test alarm operations with performance benchmarks
 */
async function testAlarmOperations() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[11]++;
  const tests =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[76]++, []);
  const suiteStart =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[77]++, performance.now());
  let testAlarm =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[78]++, null);
  const testUserId =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[79]++, '12345678-1234-1234-1234-123456789012');
  const testAlarmData =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[80]++, {
    user_id: testUserId,
    name: 'Test Alarm',
    time: '07:00',
    enabled: true,
    repeat_pattern: 'daily',
    volume: 0.8,
    white_noise_enabled: true,
    white_noise_category: 'nature',
    white_noise_volume: 0.5
  });
  // Test 1: Create alarm
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[81]++;
  try {
    const {
      result,
      duration
    } =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[82]++, await PerformanceBenchmark.measureAsync(async () => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[12]++;
      cov_1ege9wdjbo().s[83]++;
      return database_1.AlarmService.create(testAlarmData);
    }));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[84]++;
    tests.push({
      test: 'Alarm Creation',
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[21][0]++, 'Alarm created successfully') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[21][1]++,
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[22][0]++, result.error?.message) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[22][1]++, 'Creation failed')),
      duration,
      data: result.data
    });
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[85]++;
    if (result.success) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().b[23][0]++;
      cov_1ege9wdjbo().s[86]++;
      testAlarm = result.data;
    } else
    /* istanbul ignore next */
    {
      cov_1ege9wdjbo().b[23][1]++;
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[87]++;
    tests.push({
      test: 'Alarm Creation',
      success: false,
      message: 'Exception during alarm creation',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[24][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[24][1]++, String(error))
    });
  }
  // Test 2: Get alarms by user
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[88]++;
  try {
    const {
      result,
      duration
    } =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[89]++, await PerformanceBenchmark.measureAsync(async () => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[13]++;
      cov_1ege9wdjbo().s[90]++;
      return database_1.AlarmService.getByUser(testUserId);
    }));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[91]++;
    tests.push({
      test: 'Alarm Retrieval by User',
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[25][0]++, `Retrieved ${
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[26][0]++, result.data?.length) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[26][1]++, 0)} alarms`) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[25][1]++,
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[27][0]++, result.error?.message) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[27][1]++, 'Retrieval failed')),
      duration,
      data: result.pagination
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[92]++;
    tests.push({
      test: 'Alarm Retrieval by User',
      success: false,
      message: 'Exception during alarm retrieval',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[28][1]++, String(error))
    });
  }
  // Test 3: Get active alarms
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[93]++;
  try {
    const {
      result,
      duration
    } =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[94]++, await PerformanceBenchmark.measureAsync(async () => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[14]++;
      cov_1ege9wdjbo().s[95]++;
      return database_1.AlarmService.getActiveByUser(testUserId);
    }));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[96]++;
    tests.push({
      test: 'Active Alarms Retrieval',
      success: result.success,
      message: result.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[29][0]++, `Retrieved ${
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[30][0]++, result.data?.length) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[30][1]++, 0)} active alarms`) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[29][1]++,
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[31][0]++, result.error?.message) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[31][1]++, 'Retrieval failed')),
      duration,
      data: result.data
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[97]++;
    tests.push({
      test: 'Active Alarms Retrieval',
      success: false,
      message: 'Exception during active alarms retrieval',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[32][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[32][1]++, String(error))
    });
  }
  // Test 4: Update alarm
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[98]++;
  if (testAlarm) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().b[33][0]++;
    cov_1ege9wdjbo().s[99]++;
    try {
      const {
        result,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[100]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[15]++;
        cov_1ege9wdjbo().s[101]++;
        return database_1.AlarmService.update(testAlarm.id, {
          name: 'Updated Test Alarm',
          volume: 0.9,
          enabled: false
        });
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[102]++;
      tests.push({
        test: 'Alarm Update',
        success: result.success,
        message: result.success ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[34][0]++, 'Alarm updated successfully') :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[34][1]++,
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[35][0]++, result.error?.message) ||
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[35][1]++, 'Update failed')),
        duration,
        data: result.data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[103]++;
      tests.push({
        test: 'Alarm Update',
        success: false,
        message: 'Exception during alarm update',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[36][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[36][1]++, String(error))
      });
    }
    // Test 5: Toggle alarm
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[104]++;
    try {
      const {
        result,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[105]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[16]++;
        cov_1ege9wdjbo().s[106]++;
        return database_1.AlarmService.toggle(testAlarm.id, true);
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[107]++;
      tests.push({
        test: 'Alarm Toggle',
        success: result.success,
        message: result.success ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[37][0]++, 'Alarm toggled successfully') :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[37][1]++,
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[38][0]++, result.error?.message) ||
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[38][1]++, 'Toggle failed')),
        duration,
        data: result.data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[108]++;
      tests.push({
        test: 'Alarm Toggle',
        success: false,
        message: 'Exception during alarm toggle',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[39][1]++, String(error))
      });
    }
    // Test 6: Delete alarm
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[109]++;
    try {
      const {
        result,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[110]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[17]++;
        cov_1ege9wdjbo().s[111]++;
        return database_1.AlarmService.delete(testAlarm.id);
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[112]++;
      tests.push({
        test: 'Alarm Deletion',
        success: result.success,
        message: result.success ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[40][0]++, 'Alarm deleted successfully') :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[40][1]++,
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[41][0]++, result.error?.message) ||
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[41][1]++, 'Deletion failed')),
        duration,
        data: result.data
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[113]++;
      tests.push({
        test: 'Alarm Deletion',
        success: false,
        message: 'Exception during alarm deletion',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[42][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ege9wdjbo().b[42][1]++, String(error))
      });
    }
  } else
  /* istanbul ignore next */
  {
    cov_1ege9wdjbo().b[33][1]++;
  }
  const suiteDuration =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[114]++, performance.now() - suiteStart);
  const passed =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[115]++, tests.filter(t => {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[18]++;
    cov_1ege9wdjbo().s[116]++;
    return t.success;
  }).length);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[117]++;
  return {
    suite: 'Alarm Operations',
    tests,
    summary: {
      total: tests.length,
      passed,
      failed: tests.length - passed,
      duration: suiteDuration
    }
  };
}
/**
 * Test real-time functionality
 */
async function testRealtimeSubscriptions() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[19]++;
  const tests =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[118]++, []);
  const suiteStart =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[119]++, performance.now());
  const testUserId =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[120]++, '12345678-1234-1234-1234-123456789012');
  // Test 1: Alarm subscription
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[121]++;
  try {
    const benchmark =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[122]++, new PerformanceBenchmark());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[123]++;
    benchmark.start();
    let subscriptionWorks =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[124]++, false);
    let subscriptionError =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[125]++, null);
    const channel =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[126]++, database_1.AlarmService.subscribeToUserAlarms(testUserId, payload => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[20]++;
      cov_1ege9wdjbo().s[127]++;
      console.log('Real-time alarm update received:', payload);
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[128]++;
      subscriptionWorks = true;
    }));
    // Wait a moment to establish connection
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[129]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[21]++;
      cov_1ege9wdjbo().s[130]++;
      return setTimeout(resolve, 1000);
    });
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[131]++, benchmark.end());
    // Check if channel is subscribed
    const isSubscribed =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[132]++, channel.state === 'joined');
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[133]++;
    await channel.unsubscribe();
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[134]++;
    tests.push({
      test: 'Alarm Real-time Subscription',
      success: isSubscribed,
      message: isSubscribed ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[43][0]++, 'Subscription established successfully') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[43][1]++, 'Failed to establish subscription'),
      duration,
      data: {
        channel_state: channel.state
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[135]++;
    tests.push({
      test: 'Alarm Real-time Subscription',
      success: false,
      message: 'Exception during subscription test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[44][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[44][1]++, String(error))
    });
  }
  // Test 2: Session subscription
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[136]++;
  try {
    const benchmark =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[137]++, new PerformanceBenchmark());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[138]++;
    benchmark.start();
    const channel =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[139]++, database_1.ActiveSessionService.subscribeToUserSessions(testUserId, payload => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[22]++;
      cov_1ege9wdjbo().s[140]++;
      console.log('Real-time session update received:', payload);
    }));
    // Wait a moment to establish connection
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[141]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[23]++;
      cov_1ege9wdjbo().s[142]++;
      return setTimeout(resolve, 1000);
    });
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[143]++, benchmark.end());
    const isSubscribed =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[144]++, channel.state === 'joined');
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[145]++;
    await channel.unsubscribe();
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[146]++;
    tests.push({
      test: 'Session Real-time Subscription',
      success: isSubscribed,
      message: isSubscribed ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[45][0]++, 'Session subscription established successfully') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[45][1]++, 'Failed to establish session subscription'),
      duration,
      data: {
        channel_state: channel.state
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[147]++;
    tests.push({
      test: 'Session Real-time Subscription',
      success: false,
      message: 'Exception during session subscription test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[46][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[46][1]++, String(error))
    });
  }
  const suiteDuration =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[148]++, performance.now() - suiteStart);
  const passed =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[149]++, tests.filter(t => {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[24]++;
    cov_1ege9wdjbo().s[150]++;
    return t.success;
  }).length);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[151]++;
  return {
    suite: 'Real-time Subscriptions',
    tests,
    summary: {
      total: tests.length,
      passed,
      failed: tests.length - passed,
      duration: suiteDuration
    }
  };
}
/**
 * Performance benchmark tests
 */
async function testPerformanceBenchmarks() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[25]++;
  const tests =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[152]++, []);
  const suiteStart =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[153]++, performance.now());
  const testUserId =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[154]++, '12345678-1234-1234-1234-123456789012');
  // Test 1: Query performance (should be < 50ms as per requirements)
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[155]++;
  try {
    const iterations =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[156]++, 10);
    const durations =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[157]++, []);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[158]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[159]++, 0); i < iterations; i++) {
      const {
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[160]++, await PerformanceBenchmark.measureAsync(async () => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[26]++;
        cov_1ege9wdjbo().s[161]++;
        return database_1.AlarmService.getByUser(testUserId, {
          page: 1,
          limit: 20
        });
      }));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[162]++;
      durations.push(duration);
    }
    const avgDuration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[163]++, durations.reduce((sum, d) => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[27]++;
      cov_1ege9wdjbo().s[164]++;
      return sum + d;
    }, 0) / iterations);
    const maxDuration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[165]++, Math.max(...durations));
    const minDuration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[166]++, Math.min(...durations));
    const performanceTarget =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[167]++, 50); // ms
    const success =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[168]++, avgDuration < performanceTarget);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[169]++;
    tests.push({
      test: 'Query Performance (<50ms)',
      success,
      message: success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[47][0]++, `Average: ${avgDuration.toFixed(2)}ms (Target: <${performanceTarget}ms)`) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[47][1]++, `Average: ${avgDuration.toFixed(2)}ms exceeds target of ${performanceTarget}ms`),
      duration: avgDuration,
      data: {
        average: avgDuration,
        min: minDuration,
        max: maxDuration,
        target: performanceTarget,
        iterations
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[170]++;
    tests.push({
      test: 'Query Performance (<50ms)',
      success: false,
      message: 'Exception during performance test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[48][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[48][1]++, String(error))
    });
  }
  // Test 2: Concurrent operations
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[171]++;
  try {
    const benchmark =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[172]++, new PerformanceBenchmark());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[173]++;
    benchmark.start();
    const promises =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[174]++, [database_1.UserService.getById(testUserId), database_1.AlarmService.getByUser(testUserId), database_1.ActiveSessionService.getActiveByUser(testUserId), database_1.UserPreferencesService.getByUser(testUserId)]);
    const results =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[175]++, await Promise.all(promises));
    const duration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[176]++, benchmark.end());
    const successfulOperations =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[177]++, results.filter(r => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[28]++;
      cov_1ege9wdjbo().s[178]++;
      return r.success;
    }).length);
    const success =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[179]++, successfulOperations === promises.length);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[180]++;
    tests.push({
      test: 'Concurrent Operations',
      success,
      message: success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[49][0]++, `All ${promises.length} concurrent operations completed successfully`) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[49][1]++, `${successfulOperations}/${promises.length} operations succeeded`),
      duration,
      data: {
        total: promises.length,
        successful: successfulOperations,
        results: results.map(r => {
          /* istanbul ignore next */
          cov_1ege9wdjbo().f[29]++;
          cov_1ege9wdjbo().s[181]++;
          return {
            success: r.success,
            error: r.error?.code
          };
        })
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[182]++;
    tests.push({
      test: 'Concurrent Operations',
      success: false,
      message: 'Exception during concurrent operations test',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[50][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[50][1]++, String(error))
    });
  }
  const suiteDuration =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[183]++, performance.now() - suiteStart);
  const passed =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[184]++, tests.filter(t => {
    /* istanbul ignore next */
    cov_1ege9wdjbo().f[30]++;
    cov_1ege9wdjbo().s[185]++;
    return t.success;
  }).length);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[186]++;
  return {
    suite: 'Performance Benchmarks',
    tests,
    summary: {
      total: tests.length,
      passed,
      failed: tests.length - passed,
      duration: suiteDuration
    }
  };
}
/**
 * Run all database tests
 */
async function runAllDatabaseTests() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[31]++;
  const overallStart =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[187]++, performance.now());
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[188]++;
  console.log('🧪 Starting comprehensive database tests...\n');
  const suites =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[189]++, []);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[190]++;
  try {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[191]++;
    // Run test suites
    suites.push(await testDatabaseHealth());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[192]++;
    suites.push(await testUserOperations());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[193]++;
    suites.push(await testAlarmOperations());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[194]++;
    suites.push(await testRealtimeSubscriptions());
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[195]++;
    suites.push(await testPerformanceBenchmarks());
    const overallDuration =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[196]++, performance.now() - overallStart);
    // Calculate overall summary
    const overall =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[197]++, {
      total: suites.reduce((sum, suite) => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[32]++;
        cov_1ege9wdjbo().s[198]++;
        return sum + suite.summary.total;
      }, 0),
      passed: suites.reduce((sum, suite) => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[33]++;
        cov_1ege9wdjbo().s[199]++;
        return sum + suite.summary.passed;
      }, 0),
      failed: suites.reduce((sum, suite) => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[34]++;
        cov_1ege9wdjbo().s[200]++;
        return sum + suite.summary.failed;
      }, 0),
      duration: overallDuration
    });
    // Print results
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[201]++;
    console.log('\n📊 Test Results Summary:');
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[202]++;
    console.log('='.repeat(50));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[203]++;
    suites.forEach(suite => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[35]++;
      const {
        total,
        passed,
        failed,
        duration
      } =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[204]++, suite.summary);
      const successRate =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[205]++, total > 0 ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[51][0]++, (passed / total * 100).toFixed(1)) :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[51][1]++, '0.0'));
      const status =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[206]++, failed === 0 ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[52][0]++, '✅') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[52][1]++, '❌'));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[207]++;
      console.log(`${status} ${suite.suite}: ${passed}/${total} (${successRate}%) - ${duration.toFixed(2)}ms`);
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[208]++;
      if (failed > 0) {
        /* istanbul ignore next */
        cov_1ege9wdjbo().b[53][0]++;
        cov_1ege9wdjbo().s[209]++;
        suite.tests.filter(t => {
          /* istanbul ignore next */
          cov_1ege9wdjbo().f[36]++;
          cov_1ege9wdjbo().s[210]++;
          return !t.success;
        }).forEach(test => {
          /* istanbul ignore next */
          cov_1ege9wdjbo().f[37]++;
          cov_1ege9wdjbo().s[211]++;
          console.log(`   ❌ ${test.test}: ${test.message}`);
        });
      } else
      /* istanbul ignore next */
      {
        cov_1ege9wdjbo().b[53][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[212]++;
    console.log('='.repeat(50));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[213]++;
    console.log(`📈 Overall: ${overall.passed}/${overall.total} tests passed (${(overall.passed / overall.total * 100).toFixed(1)}%)`);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[214]++;
    console.log(`⏱️ Total Duration: ${overall.duration.toFixed(2)}ms`);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[215]++;
    if (overall.failed === 0) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().b[54][0]++;
      cov_1ege9wdjbo().s[216]++;
      console.log('🎉 All tests passed! Database is ready for production.');
    } else {
      /* istanbul ignore next */
      cov_1ege9wdjbo().b[54][1]++;
      cov_1ege9wdjbo().s[217]++;
      console.log(`⚠️  ${overall.failed} test(s) failed. Please review and fix issues.`);
    }
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[218]++;
    return {
      overall,
      suites
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[219]++;
    console.error('💥 Test suite execution failed:', error);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[220]++;
    throw error;
  }
}
/**
 * Quick validation test for Phase 1.2 completion
 */
async function validatePhase1_2() {
  /* istanbul ignore next */
  cov_1ege9wdjbo().f[38]++;
  cov_1ege9wdjbo().s[221]++;
  console.log('🔍 Validating Phase 1.2: Supabase Backend Foundation...\n');
  const requiredTests =
  /* istanbul ignore next */
  (cov_1ege9wdjbo().s[222]++, ['Database Connectivity', 'User Creation', 'Alarm Creation', 'Query Performance (<50ms)', 'Alarm Real-time Subscription']);
  /* istanbul ignore next */
  cov_1ege9wdjbo().s[223]++;
  try {
    const {
      suites
    } =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[224]++, await runAllDatabaseTests());
    const allTests =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[225]++, suites.flatMap(suite => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[39]++;
      cov_1ege9wdjbo().s[226]++;
      return suite.tests;
    }));
    const criticalTests =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[227]++, allTests.filter(test => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[40]++;
      cov_1ege9wdjbo().s[228]++;
      return requiredTests.some(required => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[41]++;
        cov_1ege9wdjbo().s[229]++;
        return test.test.includes(required);
      });
    }));
    const criticalPassed =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[230]++, criticalTests.filter(test => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[42]++;
      cov_1ege9wdjbo().s[231]++;
      return test.success;
    }).length);
    const success =
    /* istanbul ignore next */
    (cov_1ege9wdjbo().s[232]++, criticalPassed === requiredTests.length);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[233]++;
    console.log('\n🎯 Phase 1.2 Validation:');
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[234]++;
    console.log('='.repeat(50));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[235]++;
    requiredTests.forEach(requiredTest => {
      /* istanbul ignore next */
      cov_1ege9wdjbo().f[43]++;
      const test =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[236]++, criticalTests.find(t => {
        /* istanbul ignore next */
        cov_1ege9wdjbo().f[44]++;
        cov_1ege9wdjbo().s[237]++;
        return t.test.includes(requiredTest);
      }));
      const status =
      /* istanbul ignore next */
      (cov_1ege9wdjbo().s[238]++, test?.success ?
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[55][0]++, '✅') :
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[55][1]++, '❌'));
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[239]++;
      console.log(`${status} ${requiredTest}: ${
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[56][0]++, test?.message) ||
      /* istanbul ignore next */
      (cov_1ege9wdjbo().b[56][1]++, 'Not found')}`);
    });
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[240]++;
    console.log('='.repeat(50));
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[241]++;
    if (success) {
      /* istanbul ignore next */
      cov_1ege9wdjbo().b[57][0]++;
      cov_1ege9wdjbo().s[242]++;
      console.log('✅ Phase 1.2: Supabase Backend Foundation - COMPLETED');
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[243]++;
      console.log('✨ Ready to proceed to Phase 2: Core Sleep System');
    } else {
      /* istanbul ignore next */
      cov_1ege9wdjbo().b[57][1]++;
      cov_1ege9wdjbo().s[244]++;
      console.log('❌ Phase 1.2: Supabase Backend Foundation - INCOMPLETE');
      /* istanbul ignore next */
      cov_1ege9wdjbo().s[245]++;
      console.log(`⚠️  ${requiredTests.length - criticalPassed}/${requiredTests.length} critical requirements not met`);
    }
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[246]++;
    return success;
  } catch (error) {
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[247]++;
    console.error('💥 Phase 1.2 validation failed:', error);
    /* istanbul ignore next */
    cov_1ege9wdjbo().s[248]++;
    return false;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,