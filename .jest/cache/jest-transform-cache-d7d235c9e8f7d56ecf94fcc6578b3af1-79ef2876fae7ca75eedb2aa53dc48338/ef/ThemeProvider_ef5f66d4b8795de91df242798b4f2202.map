{"version":3,"names":["cov_14ow5pdkfo","actualCoverage","s","react_1","require","react_native_1","theme_1","auth_store_1","ThemeContext","createContext","undefined","ThemeProvider","children","f","userProfile","updateProfile","useAuthStore","mode","setModeState","useState","systemColorScheme","setSystemColorScheme","Appearance","getColorScheme","isDark","b","theme","darkTheme","lightTheme","useEffect","subscription","addChangeListener","colorScheme","remove","preferences","StatusBar","setBarStyle","setMode","newMode","contextValue","jsx_runtime_1","jsx","Provider","value","exports","useTheme","context","useContext","Error","default"],"sources":["/Users/yanivhadar/Desktop/White Noise Alarm/AlarmWhiteNoiseApp/src/components/providers/ThemeProvider.tsx"],"sourcesContent":["/**\n * Theme Provider\n * \n * Provides theme context throughout the app with automatic\n * dark mode switching and user preferences.\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Appearance, StatusBar } from 'react-native';\nimport { lightTheme, darkTheme, Theme } from '../../constants/theme';\nimport { useAuthStore } from '../../store/auth-store';\n\ntype ThemeMode = 'light' | 'dark' | 'system';\n\ninterface ThemeContextType {\n  theme: Theme;\n  mode: ThemeMode;\n  isDark: boolean;\n  setMode: (mode: ThemeMode) => Promise<void>;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const { userProfile, updateProfile } = useAuthStore();\n  const [mode, setModeState] = useState<ThemeMode>('dark'); // Default to dark for sleep optimization\n  const [systemColorScheme, setSystemColorScheme] = useState(Appearance.getColorScheme());\n\n  // Determine if dark mode should be active\n  const isDark = mode === 'dark' || (mode === 'system' && systemColorScheme === 'dark');\n  const theme = isDark ? darkTheme : lightTheme;\n\n  // Listen to system appearance changes\n  useEffect(() => {\n    const subscription = Appearance.addChangeListener(({ colorScheme }) => {\n      setSystemColorScheme(colorScheme);\n    });\n\n    return () => subscription?.remove();\n  }, []);\n\n  // Initialize theme from user preferences\n  useEffect(() => {\n    if (userProfile?.preferences?.theme) {\n      setModeState(userProfile.preferences.theme);\n    }\n  }, [userProfile?.preferences?.theme]);\n\n  // Update status bar style based on theme\n  useEffect(() => {\n    StatusBar.setBarStyle(isDark ? 'light-content' : 'dark-content', true);\n  }, [isDark]);\n\n  const setMode = async (newMode: ThemeMode) => {\n    setModeState(newMode);\n\n    // Update user preferences in the database\n    if (userProfile) {\n      await updateProfile({\n        preferences: {\n          ...userProfile.preferences,\n          theme: newMode,\n        },\n      });\n    }\n  };\n\n  const contextValue: ThemeContextType = {\n    theme,\n    mode,\n    isDark,\n    setMode,\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = (): ThemeContextType => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nexport default ThemeProvider;"],"mappings":"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","ignoreList":[]}